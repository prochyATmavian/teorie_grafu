#!/usr/bin/env python3
"""
Jednoduch√° funkce pro naƒçten√≠ a vykreslen√≠ grafu.
"""

from parser import GraphParser
from graph import Graph
from visualizer import visualize_graph, TextVisualizer


def vykresli_graf(soubor_cesta, metoda='auto', vystup='graph_viz'):
    """
    Naƒçte graf ze souboru a vykresl√≠ ho.
    
    Args:
        soubor_cesta (str): Cesta k souboru s grafem (.tg)
        metoda (str): Metoda vizualizace:
            - 'auto': Zkus√≠ matplotlib, pak graphviz, nakonec text
            - 'text': Pouze textov√° vizualizace
            - 'matplotlib': Grafick√° vizualizace pomoc√≠ matplotlib
            - 'graphviz': Grafick√° vizualizace pomoc√≠ graphviz
        vystup (str): N√°zev v√Ωstupn√≠ho souboru (bez p≈ô√≠pony)
    
    Returns:
        Graph: Instance naƒçten√©ho grafu
    """
    print(f"üìä Naƒç√≠t√°m graf ze souboru: {soubor_cesta}")
    print("=" * 60)
    
    # Naƒçten√≠ grafu
    parser = GraphParser()
    nodes, edges, is_binary_tree = parser.parse_file(soubor_cesta)
    
    print(f"‚úì Naƒçteno: {len(nodes)} uzl≈Ø, {len(edges)} hran")
    if is_binary_tree:
        print("‚úì Typ: Bin√°rn√≠ strom")
    else:
        print("‚úì Typ: Obecn√Ω graf")
    
    # Vytvo≈ôen√≠ grafu
    graph = Graph(nodes, edges, is_binary_tree)
    
    # Vizualizace
    print("\n" + "=" * 60)
    print("üé® VIZUALIZACE")
    print("=" * 60)
    
    if metoda == 'text':
        # Pouze textov√° vizualizace
        visualizer = TextVisualizer(graph)
        print(visualizer.draw_text())
        print("\n" + visualizer.draw_adjacency_list())
    else:
        # Pokus o grafickou vizualizaci
        result = visualize_graph(graph, method=metoda, output_file=vystup)
        
        if result.endswith('.png'):
            print(f"\n‚úì Graf vykreslen do souboru: {result}")
        else:
            # Textov√° vizualizace jako fallback
            print("\n" + result)
    
    print("\n" + "=" * 60)
    print("‚úì Hotovo!")
    print("=" * 60)
    
    return graph


if __name__ == "__main__":
    # P≈ô√≠klad pou≈æit√≠
    
    # 1. Naƒçten√≠ a vykreslen√≠ grafu 01.tg
    graf = vykresli_graf('/Users/prochy/Downloads/grafy/01.tg')
    
    # 2. M≈Ø≈æete pracovat s grafem d√°l
    print("\nüìã Z√°kladn√≠ informace:")
    print(f"  Poƒçet uzl≈Ø: {graf.get_node_count()}")
    print(f"  Poƒçet hran: {graf.get_edge_count()}")
    print(f"  Orientovan√Ω: {graf.is_directed()}")
    print(f"  Ohodnocen√Ω: {graf.is_weighted()}")
    
    # 3. P≈ô√≠klad: Informace o uzlu E
    if graf.has_node('E'):
        print("\nüîç Informace o uzlu E:")
        print(f"  N√°sledn√≠ci U+(E): {graf.get_successors('E')}")
        print(f"  P≈ôedch≈Ødci U-(E): {graf.get_predecessors('E')}")
        print(f"  Stupe≈à d(E): {graf.get_degree('E')}")

