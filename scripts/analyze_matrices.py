#!/usr/bin/env python3
"""
Rozpozn√°vaƒç graf≈Ø - anal√Ωza matic a seznam≈Ø.

Naƒç√≠t√° graf z textov√©ho souboru a prov√°d√≠:
- Sestaven√≠ matice sousednosti
- Sestaven√≠ znam√©nkov√© matice
- Mocniny matice sousednosti
- Matice incidence
- Matice d√©lek (Floyd-Warshall)
- Seznam soused≈Ø
"""

import sys
from pathlib import Path

# P≈ôid√°n√≠ rodiƒçovsk√©ho adres√°≈ôe do sys.path pro import src modul≈Ø
sys.path.insert(0, str(Path(__file__).parent.parent))

from src.parser import GraphParser
from src.graph import Graph
from src.matrices import MatrixBuilder


def print_matrix(matrix, row_labels=None, col_labels=None, title="Matice", show_dimensions=True):
    """Vyp√≠≈°e matici v ƒçiteln√©m form√°tu."""
    rows = len(matrix)
    cols = len(matrix[0]) if matrix else 0
    
    print(f"\n{title}:")
    if show_dimensions:
        print(f"Rozmƒõry: {rows} ≈ô√°dk≈Ø √ó {cols} sloupc≈Ø")
    print("-" * 60)
    
    # Hlaviƒçka se sloupci
    if col_labels:
        header = "    " + " ".join(f"{label:>4}" for label in col_labels)
        print(header)
    
    # ≈ò√°dky matice
    for i, row in enumerate(matrix):
        if row_labels:
            label = f"{row_labels[i]:>3}:"
        else:
            label = f"{i:>3}:"
        
        # Form√°tov√°n√≠ ƒç√≠sel
        formatted_row = []
        for val in row:
            if val == float('inf'):
                formatted_row.append("  ‚àû ")
            elif isinstance(val, float):
                formatted_row.append(f"{val:>4.1f}")
            elif val is None:
                formatted_row.append("  - ")
            else:
                formatted_row.append(f"{val:>4}")
        
        print(label + " ".join(formatted_row))
    print()


def get_matrix_element(matrix, row, col, row_labels=None, col_labels=None):
    """
    Vr√°t√≠ prvek matice na pozici [≈ô√°dek][sloupec].
    
    Args:
        matrix: Matice
        row (int): Index ≈ô√°dku (od 0)
        col (int): Index sloupce (od 0)
        row_labels: Seznam popisk≈Ø ≈ô√°dk≈Ø (voliteln√©)
        col_labels: Seznam popisk≈Ø sloupc≈Ø (voliteln√©)
        
    Returns:
        Hodnota prvku nebo None pokud index nen√≠ platn√Ω
    """
    if row < 0 or row >= len(matrix):
        return None
    if col < 0 or col >= len(matrix[row]):
        return None
    
    value = matrix[row][col]
    
    # Form√°tov√°n√≠ hodnoty
    if value == float('inf'):
        value_str = "‚àû"
    elif isinstance(value, float):
        value_str = f"{value:.1f}"
    elif value is None:
        value_str = "-"
    else:
        value_str = str(value)
    
    row_label = row_labels[row] if row_labels and row < len(row_labels) else str(row)
    col_label = col_labels[col] if col_labels and col < len(col_labels) else str(col)
    
    return {
        'value': value,
        'value_str': value_str,
        'row_index': row,
        'col_index': col,
        'row_label': row_label,
        'col_label': col_label
    }


def print_matrix_element(matrix, row, col, row_labels=None, col_labels=None, matrix_name="Matice"):
    """Vyp√≠≈°e konkr√©tn√≠ prvek matice."""
    result = get_matrix_element(matrix, row, col, row_labels, col_labels)
    
    if result is None:
        print(f"‚ùå Neplatn√Ω index [{row}][{col}] - mimo rozsah matice!")
        return
    
    print(f"\n{matrix_name}[{result['row_label']}][{result['col_label']}] = {result['value_str']}")
    print(f"   (index: [{result['row_index']}][{result['col_index']}])")


def analyze_matrices(filepath, matrix_index=None):
    """
    Naƒçte graf a vytvo≈ô√≠ jeho matice a seznamy.
    
    Args:
        filepath (str): Cesta k souboru s grafem
        matrix_index (tuple): (≈ô√°dek, sloupec) pro zobrazen√≠ konkr√©tn√≠ho prvku, None = zobrazit cel√© matice
    """
    print(f"\nNaƒç√≠t√°m graf ze souboru: {filepath}")
    print("=" * 60)
    
    # 1. Parsov√°n√≠
    parser = GraphParser()
    nodes, edges, is_binary_tree = parser.parse_file(filepath)
    
    print(f"Naƒçteno: {len(nodes)} uzl≈Ø, {len(edges)} hran")
    if is_binary_tree:
        print("Typ: Bin√°rn√≠ strom")
    else:
        print("Typ: Obecn√Ω graf")
    
    # 2. Vytvo≈ôen√≠ grafu
    graph = Graph(nodes, edges, is_binary_tree)
    
    # 3. Matice
    print("\n" + "=" * 60)
    if matrix_index:
        row, col = matrix_index
        print(f"P≈ò√çSTUP K PRVK≈ÆM MATIC - Index [{row}][{col}]")
    else:
        print("MATICE A SEZNAMY")
    print("=" * 60)
    
    builder = MatrixBuilder(graph)
    
    # Matice sousednosti
    adj_matrix, nodes_list = builder.adjacency_matrix()
    if matrix_index:
        row, col = matrix_index
        print_matrix_element(adj_matrix, row, col, nodes_list, nodes_list, "a) Matice sousednosti")
    else:
        print_matrix(adj_matrix, nodes_list, nodes_list, "a) Matice sousednosti")
    
    # Znam√©nkov√° matice
    sign_matrix, _ = builder.signed_matrix()
    if matrix_index:
        row, col = matrix_index
        print_matrix_element(sign_matrix, row, col, nodes_list, nodes_list, "b) Znam√©nkov√° matice")
    else:
        print_matrix(sign_matrix, nodes_list, nodes_list, "b) Znam√©nkov√° matice")
    
    # Mocniny matice sousednosti
    if len(nodes_list) <= 10:  # Pouze pro men≈°√≠ grafy
        powers = builder.adjacency_matrix_powers(3)
        for power, (matrix, _) in powers.items():
            if matrix_index:
                row, col = matrix_index
                print_matrix_element(matrix, row, col, nodes_list, nodes_list, f"c) Matice sousednosti^{power}")
            else:
                print_matrix(matrix, nodes_list, nodes_list, f"c) Matice sousednosti^{power}")
    else:
        if not matrix_index:
            print(f"\nc) Matice sousednosti^n: Vynech√°no (graf m√° {len(nodes_list)} uzl≈Ø > 10)")
    
    # Matice incidence
    inc_matrix, nodes_inc, edges_inc = builder.incidence_matrix()
    edge_labels = [edge.label if edge.label else f"e{i}" for i, edge in enumerate(edges_inc)]
    if matrix_index:
        row, col = matrix_index
        print_matrix_element(inc_matrix, row, col, nodes_inc, edge_labels, "d) Matice incidence")
    else:
        print_matrix(inc_matrix, nodes_inc, edge_labels, "d) Matice incidence")
    
    # Matice d√©lek
    dist_matrix, _ = builder.distance_matrix()
    if matrix_index:
        row, col = matrix_index
        print_matrix_element(dist_matrix, row, col, nodes_list, nodes_list, "e) Matice d√©lek (Floyd-Warshall)")
    else:
        print_matrix(dist_matrix, nodes_list, nodes_list, "e) Matice d√©lek (Floyd-Warshall)")
    
    if not matrix_index:
        # Seznam soused≈Ø
        print("\nh) Seznam soused≈Ø:")
        neighbors = builder.neighbor_list()
        for node, neighs in neighbors.items():
            print(f"   {node}: {neighs}")
    
    print("\n" + "=" * 60)
    if matrix_index:
        print("P≈ò√çSTUP K PRVK≈ÆM DOKONƒåEN")
    else:
        print("ANAL√ùZA MATIC DOKONƒåENA")
    print("=" * 60)
    
    return graph


def interactive_matrix_selection(filepath):
    """
    Interaktivn√≠ re≈æim pro v√Ωbƒõr matice a indexu.
    """
    print("\n" + "=" * 60)
    print("INTERAKTIVN√ç V√ùBƒöR MATICE")
    print("=" * 60)
    
    # Nab√≠dka matic
    print("\nVyberte matici k sestaven√≠:")
    print("  a) Matice sousednosti")
    print("  b) Znam√©nkov√° matice")
    print("  c) Mocniny matice sousednosti (A^2, A^3)")
    print("  d) Matice incidence")
    print("  e) Matice d√©lek (Floyd-Warshall)")
    print("  h) Seznam soused≈Ø")
    print("  *) V≈°echny matice")
    print("")
    
    choice = input("Va≈°e volba (a/b/c/d/e/h/*): ").strip().lower()
    
    if choice not in ['a', 'b', 'c', 'd', 'e', 'h', '*']:
        print(f"‚ùå Neplatn√° volba: '{choice}'")
        sys.exit(1)
    
    # Naƒçten√≠ grafu
    print(f"\nNaƒç√≠t√°m graf ze souboru: {filepath}")
    parser = GraphParser()
    nodes, edges, is_binary_tree = parser.parse_file(filepath)
    graph = Graph(nodes, edges, is_binary_tree)
    builder = MatrixBuilder(graph)
    
    print(f"Naƒçteno: {len(nodes)} uzl≈Ø, {len(edges)} hran")
    
    # Pt√°me se, jestli chce konkr√©tn√≠ index
    print("\n" + "-" * 60)
    show_index = input("Chcete zobrazit konkr√©tn√≠ index matice? (a/n): ").strip().lower()
    
    matrix_index = None
    if show_index in ['a', 'ano', 'y', 'yes']:
        try:
            row = int(input("Zadejte ≈ô√°dek (od 0): ").strip())
            col = int(input("Zadejte sloupec (od 0): ").strip())
            matrix_index = (row, col)
            print(f"\nüîç Zobrazuji index [{row}][{col}]")
        except ValueError:
            print("‚ùå Neplatn√Ω vstup! Pou≈æiji celou matici.")
            matrix_index = None
    
    print("\n" + "=" * 60)
    print("V√ùSLEDKY")
    print("=" * 60)
    
    nodes_list = sorted(graph.nodes.keys())
    
    # Sestaven√≠ a zobrazen√≠ vybran√© matice
    if choice == 'a' or choice == '*':
        adj_matrix, nodes_list = builder.adjacency_matrix()
        if matrix_index:
            row, col = matrix_index
            print_matrix_element(adj_matrix, row, col, nodes_list, nodes_list, "a) Matice sousednosti")
        else:
            print_matrix(adj_matrix, nodes_list, nodes_list, "a) Matice sousednosti")
    
    if choice == 'b' or choice == '*':
        sign_matrix, _ = builder.signed_matrix()
        if matrix_index:
            row, col = matrix_index
            print_matrix_element(sign_matrix, row, col, nodes_list, nodes_list, "b) Znam√©nkov√° matice")
        else:
            print_matrix(sign_matrix, nodes_list, nodes_list, "b) Znam√©nkov√° matice")
    
    if choice == 'c' or choice == '*':
        if len(nodes_list) <= 10:
            powers = builder.adjacency_matrix_powers(3)
            for power, (matrix, _) in powers.items():
                if matrix_index:
                    row, col = matrix_index
                    print_matrix_element(matrix, row, col, nodes_list, nodes_list, f"c) Matice sousednosti^{power}")
                else:
                    print_matrix(matrix, nodes_list, nodes_list, f"c) Matice sousednosti^{power}")
        else:
            print(f"\nc) Matice sousednosti^n: Vynech√°no (graf m√° {len(nodes_list)} uzl≈Ø > 10)")
    
    if choice == 'd' or choice == '*':
        inc_matrix, nodes_inc, edges_inc = builder.incidence_matrix()
        edge_labels = [edge.label if edge.label else f"e{i}" for i, edge in enumerate(edges_inc)]
        if matrix_index:
            row, col = matrix_index
            print_matrix_element(inc_matrix, row, col, nodes_inc, edge_labels, "d) Matice incidence")
        else:
            print_matrix(inc_matrix, nodes_inc, edge_labels, "d) Matice incidence")
    
    if choice == 'e' or choice == '*':
        dist_matrix, _ = builder.distance_matrix()
        if matrix_index:
            row, col = matrix_index
            print_matrix_element(dist_matrix, row, col, nodes_list, nodes_list, "e) Matice d√©lek (Floyd-Warshall)")
        else:
            print_matrix(dist_matrix, nodes_list, nodes_list, "e) Matice d√©lek (Floyd-Warshall)")
    
    if choice == 'h' or choice == '*':
        if not matrix_index:
            print("\nh) Seznam soused≈Ø:")
            neighbors = builder.neighbor_list()
            for node, neighs in neighbors.items():
                print(f"   {node}: {neighs}")
    
    print("\n" + "=" * 60)
    print("HOTOVO")
    print("=" * 60)


def main():
    """Hlavn√≠ funkce programu."""
    if len(sys.argv) < 2:
        print("Pou≈æit√≠: python analyze_matrices.py <soubor_s_grafem> [re≈æim]")
        print("")
        print("Re≈æimy:")
        print("  (bez parametru)  - Interaktivn√≠ v√Ωbƒõr matice")
        print("  --all            - Zobrazit v≈°echny matice")
        print("  --all <r> <c>    - Zobrazit prvky v≈°ech matic na indexu [r][c]")
        print("")
        print("P≈ô√≠klad:")
        print("  python analyze_matrices.py graph.tg")
        print("  python analyze_matrices.py graph.tg --all")
        print("  python analyze_matrices.py graph.tg --all 0 1")
        print("")
        print("Indexov√°n√≠ od 0!")
        sys.exit(1)
    
    filepath = sys.argv[1]
    
    # Kontrola existence souboru
    if not Path(filepath).exists():
        print(f"‚ùå Soubor nenalezen: {filepath}")
        sys.exit(1)
    
    try:
        # Re≈æim --all (p≈Øvodn√≠ funkcionalita)
        if len(sys.argv) >= 3 and sys.argv[2] == '--all':
            matrix_index = None
            
            # Kontrola index≈Ø
            if len(sys.argv) >= 5:
                try:
                    row = int(sys.argv[3])
                    col = int(sys.argv[4])
                    matrix_index = (row, col)
                    print(f"\nüîç Re≈æim p≈ô√≠stupu k prvk≈Øm - Index [{row}][{col}]")
                except ValueError:
                    print(f"‚ùå Chyba: ≈ò√°dek a sloupec mus√≠ b√Ωt cel√° ƒç√≠sla!")
                    print(f"   Zad√°no: ≈ô√°dek='{sys.argv[3]}', sloupec='{sys.argv[4]}'")
                    sys.exit(1)
            
            analyze_matrices(filepath, matrix_index)
        
        # Interaktivn√≠ re≈æim (default)
        else:
            interactive_matrix_selection(filepath)
            
    except FileNotFoundError:
        print(f"‚ùå Soubor nenalezen: {filepath}")
        sys.exit(1)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  P≈ôeru≈°eno u≈æivatelem")
        sys.exit(0)
    except Exception as e:
        print(f"‚ùå Chyba p≈ôi zpracov√°n√≠: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()

