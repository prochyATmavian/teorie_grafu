#!/usr/bin/env python3
"""
Uk√°zka pou≈æit√≠ NamedMatrix - p≈ô√≠stup k prvk≈Øm matic pomoc√≠ n√°zv≈Ø uzl≈Ø/hran.

Tento skript ukazuje nov√© API pro pr√°ci s maticemi, kde m≈Ø≈æete pou≈æ√≠vat
n√°zvy uzl≈Ø m√≠sto ƒç√≠seln√Ωch index≈Ø.
"""

import sys
from pathlib import Path

# P≈ôid√°n√≠ src do sys.path
sys.path.insert(0, str(Path(__file__).parent))

from src.parser import GraphParser
from src.graph import Graph
from src.matrices import MatrixBuilder


def demo_named_matrices():
    """Uk√°zka pou≈æit√≠ NamedMatrix."""
    
    print("=" * 70)
    print("UK√ÅZKA: P≈ô√≠stup k matic√≠m pomoc√≠ n√°zv≈Ø uzl≈Ø/hran")
    print("=" * 70)
    
    # Naƒçteme uk√°zkov√Ω graf
    filepath = "data/grafy/01.tg"
    
    if not Path(filepath).exists():
        print(f"‚ùå Soubor {filepath} neexistuje!")
        return
    
    print(f"\nüìÇ Naƒç√≠t√°m graf: {filepath}")
    parser = GraphParser()
    nodes, edges, is_binary_tree = parser.parse_file(filepath)
    graph = Graph(nodes, edges, is_binary_tree)
    
    print(f"‚úÖ Naƒçteno: {len(graph.nodes)} uzl≈Ø, {len(graph.edges_list)} hran")
    print(f"   Uzly: {sorted(graph.nodes.keys())}")
    
    # Vytvo≈ô√≠me matice
    builder = MatrixBuilder(graph)
    
    print("\n" + "=" * 70)
    print("1. MATICE SOUSEDNOSTI")
    print("=" * 70)
    
    adj_matrix = builder.adjacency_matrix()
    print(f"\nüìä Typ: {type(adj_matrix)}")
    print(f"üìê Rozmƒõry: {adj_matrix}")
    print(f"   ≈ò√°dky (uzly): {adj_matrix.row_labels()}")
    print(f"   Sloupce (uzly): {adj_matrix.col_labels()}")
    
    # Uk√°zka p≈ô√≠stupu pomoc√≠ ƒç√≠seln√Ωch index≈Ø (star√© API - st√°le funguje)
    print("\nüî¢ P≈ô√≠stup pomoc√≠ ƒå√çSELN√ùCH INDEX≈Æ:")
    if len(adj_matrix.row_labels()) > 1:
        print(f"   adj_matrix[0][1] = {adj_matrix[0][1]}")
        print(f"   adj_matrix[1][0] = {adj_matrix[1][0]}")
    
    # Uk√°zka p≈ô√≠stupu pomoc√≠ n√°zv≈Ø uzl≈Ø (nov√© API!)
    print("\n‚ú® P≈ô√≠stup pomoc√≠ N√ÅZV≈Æ UZL≈Æ:")
    node_list = adj_matrix.row_labels()
    
    if len(node_list) >= 2:
        node1, node2 = node_list[0], node_list[1]
        
        print(f"   adj_matrix['{node1}']['{node2}'] = {adj_matrix[node1][node2]}")
        print(f"   adj_matrix['{node2}']['{node1}'] = {adj_matrix[node2][node1]}")
        
        # M≈Ø≈æeme tak√© pou≈æ√≠t metodu get()
        value = adj_matrix.get(node1, node2)
        print(f"\n   Alternativnƒõ: adj_matrix.get('{node1}', '{node2}') = {value}")
    
    # Kombinace - jeden index ƒç√≠seln√Ω, druh√Ω n√°zev
    print("\nüîÄ KOMBINACE index≈Ø a n√°zv≈Ø:")
    if len(node_list) >= 2:
        print(f"   adj_matrix[0]['{node_list[1]}'] = {adj_matrix[0][node_list[1]]}")
        print(f"   adj_matrix['{node_list[0]}'][1] = {adj_matrix[node_list[0]][1]}")
    
    print("\n" + "=" * 70)
    print("2. MATICE INCIDENCE")
    print("=" * 70)
    
    inc_matrix = builder.incidence_matrix()
    print(f"\nüìä Typ: {type(inc_matrix)}")
    print(f"üìê Rozmƒõry: {inc_matrix}")
    print(f"   ≈ò√°dky (uzly): {inc_matrix.row_labels()}")
    print(f"   Sloupce (hrany): {inc_matrix.col_labels()}")
    
    if len(inc_matrix.row_labels()) > 0 and len(inc_matrix.col_labels()) > 0:
        node = inc_matrix.row_labels()[0]
        edge = inc_matrix.col_labels()[0]
        
        print(f"\n‚ú® P≈ô√≠stup pomoc√≠ n√°zvu uzlu a hrany:")
        print(f"   inc_matrix['{node}']['{edge}'] = {inc_matrix[node][edge]}")
    
    print("\n" + "=" * 70)
    print("3. MATICE D√âLEK (Floyd-Warshall)")
    print("=" * 70)
    
    dist_matrix = builder.distance_matrix()
    print(f"\nüìä Typ: {type(dist_matrix)}")
    
    if len(node_list) >= 2:
        node1, node2 = node_list[0], node_list[1]
        
        distance = dist_matrix[node1][node2]
        print(f"\n‚ú® Vzd√°lenost z '{node1}' do '{node2}':")
        if distance == float('inf'):
            print(f"   dist_matrix['{node1}']['{node2}'] = ‚àû (nedosa≈æiteln√Ω)")
        else:
            print(f"   dist_matrix['{node1}']['{node2}'] = {distance}")
    
    print("\n" + "=" * 70)
    print("4. CHYBOV√â STAVY")
    print("=" * 70)
    
    print("\n‚ùå Pokus o p≈ô√≠stup k neexistuj√≠c√≠mu uzlu:")
    try:
        value = adj_matrix['NEEXISTUJICI_UZEL']['A']
        print(f"   Hodnota: {value}")
    except KeyError as e:
        print(f"   Chyba: {e}")
    
    print("\n" + "=" * 70)
    print("5. P≈ò√çSTUP K SUROV√ùM DAT≈ÆM")
    print("=" * 70)
    
    print("\nüîß Pokud pot≈ôebujete surov√° data (2D seznam):")
    raw_data = adj_matrix.raw()
    print(f"   Typ: {type(raw_data)}")
    print(f"   Prvn√≠ ≈ô√°dek: {raw_data[0] if raw_data else 'pr√°zdn√©'}")
    
    print("\n" + "=" * 70)
    print("‚úÖ UK√ÅZKA DOKONƒåENA")
    print("=" * 70)
    print("\nNov√© API umo≈æ≈àuje:")
    print("  ‚úì Pou≈æit√≠ n√°zv≈Ø uzl≈Ø/hran m√≠sto ƒç√≠seln√Ωch index≈Ø")
    print("  ‚úì ƒå√≠seln√© indexy st√°le funguj√≠ (zpƒõtn√° kompatibilita)")
    print("  ‚úì Kombinace obou p≈ô√≠stup≈Ø")
    print("  ‚úì Lep≈°√≠ ƒçitelnost a men≈°√≠ n√°chylnost k chyb√°m")
    print("\nP≈ô√≠klady pou≈æit√≠:")
    print("  matrix['A']['B']     - p≈ô√≠stup pomoc√≠ n√°zv≈Ø")
    print("  matrix[0][1]         - p≈ô√≠stup pomoc√≠ index≈Ø") 
    print("  matrix.get('A', 'B') - alternativn√≠ syntaxe")
    print("  matrix.raw()         - z√≠sk√°n√≠ surov√Ωch dat")
    print()


if __name__ == "__main__":
    try:
        demo_named_matrices()
    except Exception as e:
        print(f"\n‚ùå Chyba: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

